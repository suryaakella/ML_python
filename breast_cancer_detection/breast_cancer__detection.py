# -*- coding: utf-8 -*-
"""breast_cancer _detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EvJSoGSjbxP-jypgl7T4RG3_8uSvZw2N
"""

# importing packages

import pickle
import sys
import numpy as np
import matplotlib
import pandas as pd
import sklearn

# versions of packages

print('system:', sys.version)
print('Numpy:', np.__version__)
print('Matplotlib:', matplotlib.__version__)
print('pandas:', pd.__version__)
print('sklearn:', sklearn.__version__)

# import specific packages

from sklearn import preprocessing
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn import model_selection
from sklearn.metrics import classification_report, accuracy_score
from pandas.plotting import scatter_matrix
import matplotlib.pyplot as plt
from sklearn.model_selection import cross_validate, cross_val_score, cross_val_predict

# Loading the dataset

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data'
names = ['id', 'clump_thickness', 'uniform_cell_size', 'uniform_cell_shape', 'marginal_adhesion', 'single_epithelial_size', 'bare_nuclei','blend_chromatin','normal_nuclei','mitoses','classes']

df = pd.read_csv(url, names=names)

# replaces all missing data to -9999

df.replace('?', -9999, inplace=True)
df.drop(['id'], 1, inplace=True)
df.shape

df.head(5)

df.loc[0]

df.describe()

df.hist(figsize=(11,11))
plt.show()

scatter_matrix(df,figsize=(18,18))
plt.show()

df.head(1)

x = np.array(df.drop(['classes'], 1))
y = np.array(df['classes'])
print(x.shape)
print(y.shape)

x_train, x_test,y_train, y_test = model_selection.train_test_split(x, y, test_size=0.2)
print(x_train.shape,y_train.shape,x_test.shape,y_test.shape)

seed = 8
scoring = 'accuracy'

models = []
models.append(('KNN', KNeighborsClassifier(n_neighbors = 5)))
models.append(('SVM', SVC()))

results = []
names = []
print('x_train',x_train.shape)
print('y_train', y_train.shape)
for name, model in models:
    kfold = model_selection.KFold(n_splits=10, random_state = seed)
    cv_results = model_selection.cross_val_score(model, x_train, y_train, cv=kfold, scoring=scoring)
    results.append(cv_results)
    print('--------', name)
    names.append(name)
    msg = "%s: %f (%f)" % (name, cv_results.mean(), cv_results.std())
    print(msg)

# # Make predictions on validation dataset
#
for name, model in models:
    model.fit(x_train, y_train)
    predictions = model.predict(x_test)
    print(name)
    print(accuracy_score(y_test, predictions))
    print(classification_report(y_test, predictions))

clf = SVC()

clf.fit(x_train, y_train)
pickle.dump(clf, open('svm_model.pkl','wb'))
accuracy = clf.score(x_test, y_test)
print(accuracy)

example_measures = np.array([[4,2,1,1,1,2,3,2,1]])
# example_measures = example_measures.reshape(len(example_measures), -1)
model = pickle.load(open('svm_model.pkl','rb'))
prediction = model.predict(example_measures)
print(prediction[0])
